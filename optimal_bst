#include <stdio.h>
#include <limits.h>
#include <float.h>

void OBST_general(int n, double P[], double Q[], double E[n + 1][n + 1], double W[n + 1][n + 1], int R[n + 1][n + 1]) {
    for (int i = 0; i <= n; i++) {
        E[i][i] = Q[i];
        W[i][i] = Q[i];
        R[i][i] = 0;
    }

    for (int d = 1; d <= n; d++) {
        for (int i = 0; i <= n - d; i++) {
            int j = i + d;

            W[i][j] = W[i][j - 1] + P[j] + Q[j];

            double min_cost = DBL_MAX;
            int k_root = -1;

            for (int k = i + 1; k <= j; k++) {
                double current_cost = E[i][k - 1] + E[k][j] + W[i][j];

                if (current_cost < min_cost) {
                    min_cost = current_cost;
                    k_root = k;
                }
            }
            E[i][j] = min_cost;
            R[i][j] = k_root;
        }
    }
}


void OptimalBST_Successful(double P[], int n, double C[n + 2][n + 2], int R[n + 2][n + 2]) {
    for (int i = 1; i <= n; i++) {
        C[i][i - 1] = 0.0;
        C[i][i] = P[i];
        R[i][i] = i;
    }
    C[n + 1][n] = 0.0;

    for (int d = 1; d <= n - 1; d++) {
        for (int i = 1; i <= n - d; i++) {
            int j = i + d;
            double minval = DBL_MAX;
            int kmin = -1;

            for (int k = i; k <= j; k++) {
                double current_cost = C[i][k - 1] + C[k + 1][j];
                
                if (current_cost < minval) {
                    minval = current_cost;
                    kmin = k;
                }
            }
            R[i][j] = kmin;

            double sum = 0.0;
            for (int s = i; s <= j; s++) {
                sum += P[s];
            }
            
            C[i][j] = minval + sum;
        }
    }
}
void print_matrices_general(int n, double E[n + 1][n + 1], double W[n + 1][n + 1], int R[n + 1][n + 1]) {
    printf("\n--- General OBST Results (Probabilities, Indices 0 to %d) ---\n", n);

    printf("\nExpected Cost Matrix E (E[i,j] is for keys k_i+1 to k_j):\n");
    printf("   "); for(int j=0; j<=n; j++) printf("%6d", j); printf("\n");
    for (int i = 0; i <= n; i++) {
        printf("%d |", i);
        for (int j = 0; j <= n; j++) {
            if (i > j) {
                printf("  -   ");
            } else {
                printf("%6.2f", E[i][j]);
            }
        }
        printf("\n");
    }
    printf("\nWeight Matrix W:\n");
    printf("   "); for(int j=0; j<=n; j++) printf("%6d", j); printf("\n");
    for (int i = 0; i <= n; i++) {
        printf("%d |", i);
        for (int j = 0; j <= n; j++) {
            if (i > j) {
                printf("  -   ");
            } else {
                printf("%6.2f", W[i][j]);
            }
        }
        printf("\n");
    }

    printf("\nRoot Matrix R (R[i,j] is the index k_k):\n");
    printf("   "); for(int j=0; j<=n; j++) printf("%6d", j); printf("\n");
    for (int i = 0; i <= n; i++) {
        printf("%d |", i);
        for (int j = 0; j <= n; j++) {
            if (i >= j) {
                printf("  %d   ", R[i][j]);
            } else {
                printf("%6d", R[i][j]);
            }
        }
        printf("\n");
    }
    printf("\nOptimal Expected Cost E[0][%d] = %.2f\n", n, E[0][n]);
}


void print_matrices_successful(int n, double C[n + 2][n + 2], int R[n + 2][n + 2]) {
    printf("\n--- Successful OBST Results (Indices 1 to %d) ---\n", n);
    
    printf("\nCost Matrix C (C[i,j] is the cost for keys k_i to k_j):\n");
    printf("     "); for(int j=0; j<=n+1; j++) printf(" %7d", j); printf("\n");
    for (int i = 1; i <= n + 1; i++) {
        printf("%d |  ", i);
        for (int j = 0; j <= n + 1; j++) {
            if (i > j + 1) {
                printf("  -     ");
            } else {
                printf(" %7.2f", C[i][j]);
            }
        }
        printf("\n");
    }

    printf("\nRoot Matrix R:\n");
    printf("     "); for(int j=0; j<=n+1; j++) printf(" %7d", j); printf("\n");
    for (int i = 1; i <= n + 1; i++) {
        printf("%d |  ", i);
        for (int j = 0; j <= n + 1; j++) {
            if (i > j + 1) {
                printf("  -     ");
            } else {
                printf(" %7d", R[i][j]);
            }
        }
        printf("\n");
    }
    printf("\nOptimal Cost C[1][%d] = %.2f\n", n, C[1][n]);
}

int main() {
    int n_gen = 4;
    double P_gen[5] = {0.0, 0.1, 0.2, 0.4, 0.3};
    double Q_gen[5] = {0.05, 0.1, 0.05, 0.05, 0.1};

    double E[5][5];
    double W[5][5];
    int R_gen[5][5];

    OBST_general(n_gen, P_gen, Q_gen, E, W, R_gen);
    print_matrices_general(n_gen, E, W, R_gen);

    int n_succ = 4;
    double P_succ[5] = {0.0, 0.1, 0.2, 0.4, 0.3}; 

    double C[6][6]; 
    int R_succ[6][6];

    OptimalBST_Successful(P_succ, n_succ, C, R_succ);
    print_matrices_successful(n_succ, C, R_succ);

    return 0;
}
